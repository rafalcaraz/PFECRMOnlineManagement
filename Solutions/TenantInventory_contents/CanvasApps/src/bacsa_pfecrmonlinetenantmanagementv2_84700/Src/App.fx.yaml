App As appinfo:
    BackEnabled: =false
    OnStart: |-
        =//TRACING
        Trace("App Launched", TraceSeverity.Information, { userEmail : User().Email} );
        
        Set(fullyLoaded, false);
        Set(percentageLoaded, 0);
        Set(areaToLoad, "");
        Set(msUserExists, false);
        Set(errorMessage, "");
        
        Set(isAdmin, User().FullName in [ "Chris Carley", "Teresa Hagman", "Rafael Lopez Alcaraz"]);
        Set(isGlobalAdmin, false);
        Set(appSettings, ParseJSON(Last('Environment Variable Values').Value));
        
        ClearCollect(appActions, 
            [
                {displayName:"Link Account",     auth: false, admin: false, ready: true, loaded: false}, 
                {displayName:"Licenses & Roles", auth: true, admin: false, ready: true, loaded: false}, 
                {displayName:"Onboard New User", auth: true, admin: false, ready: true, loaded: false},
                {displayName:"Azure",            auth: true, admin: false, ready: true, loaded: false}, 
                {displayName:"Azure Resources",  auth: true, admin: true, ready: true, loaded: false}, /////
                {displayName:"Admin Only",       auth: true, admin:true, ready: true, loaded: false},//////
                {displayName:"App Settings",     auth: true, admin:true, ready: true, loaded: false}, ///////
                {displayName:"Feedback",         auth: false, admin: false, ready: true, loaded: false}
            ]
        );
        
        //  ready = true And ((admin = true And isAdmin) 
        //  ready = true And (If(admin = true And isAdmin = true, true, If() ) = true)
        // If(ready == false, false, If((admin And isAdmin) || (auth And msUserExists) || auth = false, true, false)  )
        
        ClearCollect(allAzureSubscriptions_pfecrmonlinemanged, 
                        [
                            {name: "pfecrmonline1", subscriptionId: "0a537d41-5022-4045-b883-9f81a4472cc6"},
                            {name: "pfecrmonline2", subscriptionId: "43dee89f-36d9-4ca9-b1f7-f12b10d8f4cb"},
                            {name: "pfecrmonline3", subscriptionId: "6ab6d918-4f69-4e2f-bbc4-477c51d4d861"},
                            {name: "pfecrmonline4", subscriptionId: "d07a4420-5dd2-4a0f-9fbc-6a540c8d39de"},
                            {name: "pfecrmonline5", subscriptionId: "125c91a9-df92-4b48-92cd-6f2a02ad2c4f"},
                            {name: "pfecrmonline6", subscriptionId: "9dbbd8ea-67a6-4fc0-bfdb-cb683af1d1df"}
                        ]
                    );
        
        
        ClearCollect(appActions_loaded, appActions
        );
        Set(selectedOption, First(appActions));
        Set(sectionLoader, {visible: false, label: ""});
        
        
        // FIELD - NAM
        // FIELD - CANADA
        // FIELD - LATAM
        // CORE - NAM
        // SMC
        ClearCollect(approvedManagers, ["antoniha@microsoft.com", "jonhuss@microsoft.com", "jeortgie@microsoft.com",
        "hemab@microsoft.com",
        "caberang@microsoft.com", "mspencer@microsoft.com", "jstrand@microsoft.com", "hollycha@microsoft.com", "timtee@microsoft.com", "kacook@microsoft.com"
        ]);
        
        
        // Setting AD Roles
        ClearCollect(AzureRoles, {RoleName: "User", RoleId: "NONE"}, {RoleName: "Dynamics 365 Admin", RoleId: "44367163-eba1-44c3-98af-f5787879f96a"},{RoleName: "Power Platform Admin", RoleId: "11648597-926c-4cf3-9c36-bcebb0ba8dcc"} ,{RoleName:"Global Admin", RoleId:"62e90394-69f5-4237-9190-012177145e10"});
        
        // Set user profile 
        Set(userProfile, Office365Users.UserProfileV2(User().Email));
        
        // Get User Manager
        Set(userManager, Office365Users.ManagerV2(User().Email));
        
        If(userManager.userPrincipalName in approvedManagers ,
            
            // Search for Current User in PFECRMOnline, searching against job title [TEMP], will check for 'custom attributes' email first
            Set(payloadJson, {msftuserEmail: User().Email} );
            //Set(userDetailsResponse_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("UserMaintenance","FindMSUserInPFETenant", "{""msftUserEmail"":""" & User().Email & """ }").result));
            Set(userDetailsResponse_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("UserMaintenance","FindMSUserInPFETenant", JSON(payloadJson)).result));
            //Set(userDetailsResponse_json, PFECRMOnlineHelper.PerformAction({Area:"UserMaintenance" ,Operation:"FindMSUserInPFETenant",Parameters: ParseJSON(JSON(payloadJson))} ));
            Set(msUserExists, If(CountRows(Table(userDetailsResponse_json.value)) > 0 , true, false));
        
            If(msUserExists, 
                Set(userMainRecord, 
                    {
                        id: Text(First(Table(userDetailsResponse_json.value)).Value.id), 
                        userPrincipalName: Text(First(Table(userDetailsResponse_json.value)).Value.userPrincipalName)
                    }
                    
                );
                 Trace("App Access - User Allowed - Account Exists", TraceSeverity.Information, { userEmail : User().Email, pfeCrmOnlineEmail: userMainRecord.userPrincipalName} ); 
                ,
                Set(errorMessage, "You don't seem to have an account in PFECRMOnline. Click the button to onboard and/or link your existing main account");
                Trace("App Access - User Allowed - Account Does Not Exist", TraceSeverity.Information, { userEmail : User().Email} ); 
        
        
                // Get User - Azure Resource Groups Available
                //  ClearCollect(userResourceGroups, Blank());
                //  Set(payloadString, "{""subscriptionId"":""" & "2b36de05-257f-4f45-bd99-1daebb70d74c" & ""","
                // & """principalId"":""" & "f89e1b16-63fb-4b09-b8e8-0a859966a74c" & """}");
                    
                //Set(userRBACassignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("GetAzureRBACRolesOfUser",payloadString).result));
        
            );
            ,
            Set(errorMessage, "You are not part of the approved manager list, you must report to one of the following managers");
            Trace("App Access - User Not Allowed", TraceSeverity.Information, { userEmail : User().Email, managerEmail: userManager.userPrincipalName} ); 
        
        );
        
        
        
        
        
        Set(fullyLoaded, true);
    StartScreen: =TempStartScreen
    Theme: =SteelTheme

    Host As hostControl.DefaultHostControlVariant:
        OnCancel: =false
        OnEdit: =false
        OnNew: =false
        OnSave: =false
        OnView: =false

