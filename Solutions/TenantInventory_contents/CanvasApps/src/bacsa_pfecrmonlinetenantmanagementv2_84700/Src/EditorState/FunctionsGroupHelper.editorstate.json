{
  "ControlStates": {
    "FunctionsGroupHelper": {
      "AllowAccessToGlobals": true,
      "ControlPropertyState": [
        "Fill",
        "Height",
        "Width",
        "X",
        "Y",
        "ZIndex",
        "functionName",
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "//Swtich(FunctionsGroupHelper.functionName,\r\n//   \"RetrieveAllUserInfo\",\r\n//        Notify(\"\")\r\n//\r\n//)\r\nSet(sectionLoader, {visible: true, label: \"Loading Details...\"});\r\nSwitch(\r\n    FunctionsGroupHelper.functionName,\r\n    \"AppLoad_AzureResources\",\r\n        Notify(\"Loading Azure Resources\");\r\n            // Retrieve all azure Subscriptions\r\n            //Set(allAzureSubscriptions_json, \r\n            //    ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Azure\", \"GetAllAzureSubscriptions\", \"{}\").result).value) As _skus, \r\n            //        { id: Text(_skus.Value.subscriptionId),   //Text(ThisRecord.Value.capabilityStatus), \r\n            //            displayName: Text(_skus.Value.displayName)\r\n\r\n            //        }\r\n            //    )\r\n            //);\r\n\r\n            ClearCollect(allAzureSubscriptions_pfecrmonlinemanged, \r\n                [\r\n                    {name: \"pfecrmonline1\", subscriptionId: \"0a537d41-5022-4045-b883-9f81a4472cc6\"},\r\n                    {name: \"pfecrmonline2\", subscriptionId: \"43dee89f-36d9-4ca9-b1f7-f12b10d8f4cb\"},\r\n                    {name: \"pfecrmonline3\", subscriptionId: \"6ab6d918-4f69-4e2f-bbc4-477c51d4d861\"},\r\n                    {name: \"pfecrmonline4\", subscriptionId: \"d07a4420-5dd2-4a0f-9fbc-6a540c8d39de\"},\r\n                    {name: \"pfecrmonline5\", subscriptionId: \"125c91a9-df92-4b48-92cd-6f2a02ad2c4f\"},\r\n                    {name: \"pfecrmonline6\", subscriptionId: \"9dbbd8ea-67a6-4fc0-bfdb-cb683af1d1df\"}\r\n                ]\r\n            );\r\n\r\n            ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,\r\n                Collect(allResourceGroups,\r\n                    ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Azure\",\"GetAllResourceGroupsInSubscription\", \"{\"\"subscriptionId\"\":\"\"\" & _subscriptions.subscriptionId & \"\"\" }\").result).value) As _groups,\r\n                        {\r\n                            id : Text(_groups.Value.id),\r\n                            name: Text(_groups.Value.name),\r\n                            susbcriptionId: Text(_subscriptions.subscriptionId),\r\n                            subscriptionName: Text(_subscriptions.name)\r\n                        }\r\n                    )\r\n                )\r\n            );\r\n\r\n            ClearCollect(userResourceGroups, Blank());\r\n            ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,\r\n            Collect(userResourceGroups,\r\n                    ForAll(\r\n                        Table(\r\n                            ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Azure\",\"GetAzureRBACRolesOfUser\", \"{\"\"subscriptionId\"\":\"\"\" & _subscriptions.subscriptionId & \"\"\",\"\r\n                & \"\"\"principalId\"\":\"\"\" & userMainRecord.id & \"\"\"}\").result).value\r\n                        ) As _roles, If (\"resourceGroups\" in Text(_roles.Value.properties.scope) And \"b24988ac-6180-42a0-ab88-20f7382dd24c\" in Text(_roles.Value.properties.roleDefinitionId),\r\n                        {\r\n                            id: Text(_roles.Value.id),\r\n                            groupName: Substitute(Text(_roles.Value.properties.scope), \"/subscriptions/\" & _subscriptions.subscriptionId &  \"/resourceGroups/\" , \"\")\r\n                            //id : Text(_groups.Value.id),\r\n                            //name: Text(_groups.Value.name),\r\n                            //susbcriptionId: Text(_subscriptions.id),\r\n                            //subscriptionName: Text(_subscriptions.displayName)\r\n                        })\r\n                    )\r\n                )\r\n            );\r\n    ,   \r\n    \"RefreshUserLicenses\",\r\n       //GetUserLicenses\r\n        Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\",\"GetUserLicenses\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userLicences_Table, \r\n            ForAll(Table(userLicences_json.value) As _items,\r\n                {\r\n                    licenseAssignmentId: Text(_items.Value.id),\r\n                    licenseSkuId: Text(_items.Value.skuId),\r\n                    licenseSkuPartNumber: Text(_items.Value.skuPartNumber),\r\n                    timeAssignment: \"N/A\",\r\n                    friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName\r\n                }\r\n            )\r\n        );\r\n\r\n        //Get User Timed Requests\r\n        Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\",\"GetAccessRequests\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userTimedRequests_Table, \r\n            ForAll(Table(userTimedRequests_json.value),\r\n                {\r\n                    requestName: Text(ThisRecord.Value.msftce_name),\r\n                    requestType: Value(ThisRecord.Value.msftce_requesttype),\r\n                    requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),\r\n                    requestStartDate: Text(ThisRecord.Value.msftce_startdate),\r\n                    requestLength: Value(ThisRecord.Value.msftce_length),\r\n                    requestEndDate: Text(ThisRecord.Value.msftce_enddate),\r\n                    requestStateCode: Value(ThisRecord.Value.statecode)\r\n                }\r\n            )\r\n        );\r\n       ,\r\n    \"RefreshUserRoleAssignments\",\r\n        //GetRoleAssignmentOfUser\r\n        Set(userAssignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\", \"GetRoleAssignmentOfUser\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userAssignments_Table, \r\n            ForAll(Table(userAssignments_json.value),\r\n                {\r\n                    roleAssignmentId: Text(ThisRecord.Value.id),\r\n                    principalId: Text(ThisRecord.Value.principalId),\r\n                    roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),\r\n                    roleDisplayName: Text(ThisRecord.Value.roleDefinition.displayName),\r\n                    timeAssignment: \"false\"\r\n                }\r\n            )\r\n        );\r\n        Set(isGlobalAdmin, If(CountRows(Filter(userAssignments_Table, roleDisplayName = \"Global Administrator\")) <> 0, true, false));\r\n\r\n        If(isGlobalAdmin, \r\n            Set(globalAdminExpiryRecord, First(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Azure\", \"GetRoleExpiration\", \"{\"\"pfeCrmOnlineUserId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result).value)).Value  );\r\n\r\n            Set(globalAdminStartedOnDateTime, DateTimeValue( globalAdminExpiryRecord.completedDateTime));\r\n            Set(globalAdminDurationNumber, Value(Substitute(Substitute(globalAdminExpiryRecord.scheduleInfo.expiration.duration, \"PT\",\"\"), \"H\", \"\")));\r\n            Set(globalAdminEndsOn, DateAdd(globalAdminStartedOnDateTime, globalAdminDurationNumber, TimeUnit.Hours));\r\n            Set(globalAdminExpiryMessage, $\"Your global admin started on: {globalAdminStartedOnDateTime} and ends @ {globalAdminEndsOn}\");\r\n        \r\n        );\r\n\r\n\r\n        ,\r\n    \"RetrieveAllUserInfo\",\r\n        //GetUserLicenses\r\n        Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\" ,\"GetUserLicenses\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userLicences_Table, \r\n            ForAll(Table(userLicences_json.value) As _items,\r\n                {\r\n                    licenseAssignmentId: Text(_items.Value.id),\r\n                    licenseSkuId: Text(_items.Value.skuId),\r\n                    licenseSkuPartNumber: Text(_items.Value.skuPartNumber),\r\n                    timeAssignment: \"N/A\",\r\n                    friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName\r\n                }\r\n            )\r\n        );\r\n\r\n        //Get User Timed Requests\r\n        Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\" ,\"GetAccessRequests\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userTimedRequests_Table, \r\n            ForAll(Table(userTimedRequests_json.value),\r\n                {\r\n                    requestName: Text(ThisRecord.Value.msftce_name),\r\n                    requestType: Value(ThisRecord.Value.msftce_requesttype),\r\n                    requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),\r\n                    requestStartDate: Text(ThisRecord.Value.msftce_startdate),\r\n                    requestLength: Value(ThisRecord.Value.msftce_length),\r\n                    requestEndDate: Text(ThisRecord.Value.msftce_enddate),\r\n                    requestStateCode: Value(ThisRecord.Value.statecode)\r\n                }\r\n            )\r\n        );\r\n\r\n        //GetRoleAssignmentOfUser\r\n        Set(userAssignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Licenses\" ,\"GetRoleAssignmentOfUser\", \"{\"\"userId\"\":\"\"\" & userMainRecord.id & \"\"\" }\").result));\r\n        Set(userAssignments_Table, \r\n            ForAll(Table(userAssignments_json.value),\r\n                {\r\n                    roleAssignmentId: Text(ThisRecord.Value.id),\r\n                    principalId: Text(ThisRecord.Value.principalId),\r\n                    roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),\r\n                    roleDisplayName: Text(ThisRecord.Value.roleDefinition.displayName),\r\n                    timeAssignment: \"false\"\r\n                }\r\n            )\r\n        );\r\n\r\n        ClearCollect(userResourceGroups, Blank());\r\n        ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,\r\n        Collect(userResourceGroups,\r\n                ForAll(\r\n                    Table(\r\n                        ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run(\"Azure\", \"GetAzureRBACRolesOfUser\", \"{\"\"subscriptionId\"\":\"\"\" & _subscriptions.subscriptionId & \"\"\",\"\r\n            & \"\"\"principalId\"\":\"\"\" & userMainRecord.id & \"\"\"}\").result).value\r\n                    ) As _roles, If (\"resourceGroups\" in Text(_roles.Value.properties.scope) And \"b24988ac-6180-42a0-ab88-20f7382dd24c\" in Text(_roles.Value.properties.roleDefinitionId),\r\n                    {\r\n                        id: Text(_roles.Value.id),\r\n                        groupName: Substitute(Text(_roles.Value.properties.scope), \"/subscriptions/\" & _subscriptions.subscriptionId &  \"/resourceGroups/\" , \"\")\r\n                        //id : Text(_groups.Value.id),\r\n                        //name: Text(_groups.Value.name),\r\n                        //susbcriptionId: Text(_subscriptions.id),\r\n                        //subscriptionName: Text(_subscriptions.displayName)\r\n                    })\r\n                )\r\n            )\r\n        );\r\n);\r\nSet(callFunction, \"\");\r\nSet(sectionLoader, {visible: false, label: \"Loading Details...\"});",
          "InvariantPropertyName": "OnReset",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        }
      ],
      "IsAutoGenerated": false,
      "IsComponentDefinition": true,
      "IsDataControl": false,
      "IsFromScreenLayout": false,
      "IsGroupControl": false,
      "IsLocked": false,
      "LayoutName": "",
      "MetaDataIDKey": "",
      "Name": "FunctionsGroupHelper",
      "OptimizeForDevices": "Off",
      "ParentIndex": 0,
      "PersistMetaDataIDKey": false,
      "Properties": [
        {
          "Category": "Data",
          "PropertyName": "functionName",
          "RuleProviderType": "System"
        },
        {
          "Category": "Design",
          "PropertyName": "ZIndex",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Y",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "X",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Width",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Height",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Fill",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "OnReset",
          "RuleProviderType": "System"
        }
      ],
      "StyleName": "",
      "Type": "ControlInfo"
    }
  },
  "TopParentName": "FunctionsGroupHelper"
}