FunctionsGroupHelper As CanvasComponent:
    Fill: =RGBA(0, 0, 0, 0)
    functionName: =""
    Height: =640
    OnReset: |-
        =//Swtich(FunctionsGroupHelper.functionName,
        //   "RetrieveAllUserInfo",
        //        Notify("")
        //
        //)
        Set(sectionLoader, {visible: true, label: "Loading Details..."});
        Switch(
            FunctionsGroupHelper.functionName,
            "AppLoad_AzureResources",
                Notify("Loading Azure Resources");
                    // Retrieve all azure Subscriptions
                    //Set(allAzureSubscriptions_json, 
                    //    ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetAllAzureSubscriptions", "{}").result).value) As _skus, 
                    //        { id: Text(_skus.Value.subscriptionId),   //Text(ThisRecord.Value.capabilityStatus), 
                    //            displayName: Text(_skus.Value.displayName)
        
                    //        }
                    //    )
                    //);
        
                    ClearCollect(allAzureSubscriptions_pfecrmonlinemanged, 
                        [
                            {name: "pfecrmonline1", subscriptionId: "0a537d41-5022-4045-b883-9f81a4472cc6"},
                            {name: "pfecrmonline2", subscriptionId: "43dee89f-36d9-4ca9-b1f7-f12b10d8f4cb"},
                            {name: "pfecrmonline3", subscriptionId: "6ab6d918-4f69-4e2f-bbc4-477c51d4d861"},
                            {name: "pfecrmonline4", subscriptionId: "d07a4420-5dd2-4a0f-9fbc-6a540c8d39de"},
                            {name: "pfecrmonline5", subscriptionId: "125c91a9-df92-4b48-92cd-6f2a02ad2c4f"},
                            {name: "pfecrmonline6", subscriptionId: "9dbbd8ea-67a6-4fc0-bfdb-cb683af1d1df"}
                        ]
                    );
        
                    ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,
                        Collect(allResourceGroups,
                            ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure","GetAllResourceGroupsInSubscription", "{""subscriptionId"":""" & _subscriptions.subscriptionId & """ }").result).value) As _groups,
                                {
                                    id : Text(_groups.Value.id),
                                    name: Text(_groups.Value.name),
                                    susbcriptionId: Text(_subscriptions.subscriptionId),
                                    subscriptionName: Text(_subscriptions.name)
                                }
                            )
                        )
                    );
        
                    ClearCollect(userResourceGroups, Blank());
                    ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,
                        Collect(allResourceGroups,
                            ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure","GetAllResourceGroupsInSubscription", "{""subscriptionId"":""" & _subscriptions.subscriptionId & """ }").result).value) As _groups,
                                {
                                    id : Text(_groups.Value.id),
                                    name: Text(_groups.Value.name),
                                    susbcriptionId: Text(_subscriptions.subscriptionId),
                                    subscriptionName: Text(_subscriptions.name),
                                    managedBy: Text(_groups.Value.managedBy)
                                }
                            )
                        )
                    );
            ,   
            "RefreshUserLicenses",
               //GetUserLicenses
                Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses","GetUserLicenses", "{""userId"":""" & userMainRecord.id & """ }").result));
                Set(userLicences_Table, 
                    ForAll(Table(userLicences_json.value) As _items,
                        {
                            licenseAssignmentId: Text(_items.Value.id),
                            licenseSkuId: Text(_items.Value.skuId),
                            licenseSkuPartNumber: Text(_items.Value.skuPartNumber),
                            timeAssignment: "N/A",
                            friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName
                        }
                    )
                );
        
                //Get User Timed Requests
                Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses","GetAccessRequests", "{""userId"":""" & userMainRecord.id & """ }").result));
                Set(userTimedRequests_Table, 
                    ForAll(Table(userTimedRequests_json.value),
                        {
                            requestName: Text(ThisRecord.Value.msftce_name),
                            requestType: Value(ThisRecord.Value.msftce_requesttype),
                            requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),
                            requestStartDate: Text(ThisRecord.Value.msftce_startdate),
                            requestLength: Value(ThisRecord.Value.msftce_length),
                            requestEndDate: Text(ThisRecord.Value.msftce_enddate),
                            requestStateCode: Value(ThisRecord.Value.statecode)
                        }
                    )
                );
               ,
            "RefreshUserRoleAssignments",
                //GetRoleAssignmentOfUser
                //Set(userAssignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetRoleAssignmentOfUser", "{""userId"":""" & userMainRecord.id & """ }").result));
                //Set(userAssignments_Table, 
                //    ForAll(Table(userAssignments_json.value),
                //        {
                //            roleAssignmentId: Text(ThisRecord.Value.id),
                //            principalId: Text(ThisRecord.Value.principalId),
                //            roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                //            roleDisplayName: Text(ThisRecord.Value.roleDefinition.displayName),
                //            timeAssignment: "false"
                //        }
                //    )
                //);
        
                Set(userAssignments_json_v2, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetRoleAssignmentOfUserV2", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userAssignments_Table_v2, 
                        ForAll(Table(userAssignments_json_v2),
                            {
                                //roleAssignmentId: Text(ThisRecord.Value.id),
                                //principalId: Text(ThisRecord.Value.principalId),
                                roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                                roleDisplayName: Text(ThisRecord.Value.roleName),
                                timeAssignment: With({ expirations: Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & Text(ThisRecord.Value.roleDefinitionId) & """ }").result).value) },
                                    If(CountRows(expirations) > 0 And First(expirations).Value.scheduleInfo.expiration.type <> "noExpiration", Text(DateAdd(DateTimeValue(First(expirations).Value.completedDateTime), Value(Substitute(Substitute(First(expirations).Value.scheduleInfo.expiration.duration, "PT",""), "H", "")), TimeUnit.Hours)), "No Expiry")
                                )
                            }
                        )
                    );
        
                Set(isGlobalAdmin, If(CountRows(Filter(userAssignments_Table_v2, roleDisplayName = "Global Administrator")) <> 0, true, false));
        
                If(isGlobalAdmin, 
                    Set(globalAdminExpiryRecord, First(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & "62e90394-69f5-4237-9190-012177145e10" & """ }").result).value)).Value  );
                    If(globalAdminExpiryRecord.scheduleInfo.expiration.type = "noExpiration",
                        Set(globalAdminExpiryMessage, $"Your global admin has no expiration");
                        ,
                        Set(globalAdminStartedOnDateTime, DateTimeValue( globalAdminExpiryRecord.completedDateTime));
                        Set(globalAdminDurationNumber, Value(Substitute(Substitute(globalAdminExpiryRecord.scheduleInfo.expiration.duration, "PT",""), "H", "")));
                        Set(globalAdminEndsOn, DateAdd(globalAdminStartedOnDateTime, globalAdminDurationNumber, TimeUnit.Hours));
                        Set(globalAdminExpiryMessage, $"Your global admin started on: {globalAdminStartedOnDateTime} and ends @ {globalAdminEndsOn}");
                    );
                    
                
                );
        
        
                ,
            "RefreshAzureResources",
                ClearCollect(userResourceGroups, Blank());
                    ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,
                        Collect(allResourceGroups,
                            ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure","GetAllResourceGroupsInSubscription", "{""subscriptionId"":""" & _subscriptions.subscriptionId & """ }").result).value) As _groups,
                                {
                                    id : Text(_groups.Value.id),
                                    name: Text(_groups.Value.name),
                                    susbcriptionId: Text(_subscriptions.subscriptionId),
                                    subscriptionName: Text(_subscriptions.name),
                                    managedBy: Text(_groups.Value.managedBy)
                                }
                            )
                        )
                    );
        
               ,
            "RetrieveAllUserInfo",
                //GetUserLicenses
                Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses" ,"GetUserLicenses", "{""userId"":""" & userMainRecord.id & """ }").result));
                Set(userLicences_Table, 
                    ForAll(Table(userLicences_json.value) As _items,
                        {
                            licenseAssignmentId: Text(_items.Value.id),
                            licenseSkuId: Text(_items.Value.skuId),
                            licenseSkuPartNumber: Text(_items.Value.skuPartNumber),
                            timeAssignment: "N/A",
                            friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName
                        }
                    )
                );
        
                //Get User Timed Requests
                Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses" ,"GetAccessRequests", "{""userId"":""" & userMainRecord.id & """ }").result));
                Set(userTimedRequests_Table, 
                    ForAll(Table(userTimedRequests_json.value),
                        {
                            requestName: Text(ThisRecord.Value.msftce_name),
                            requestType: Value(ThisRecord.Value.msftce_requesttype),
                            requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),
                            requestStartDate: Text(ThisRecord.Value.msftce_startdate),
                            requestLength: Value(ThisRecord.Value.msftce_length),
                            requestEndDate: Text(ThisRecord.Value.msftce_enddate),
                            requestStateCode: Value(ThisRecord.Value.statecode)
                        }
                    )
                );
        
                //GetRoleAssignmentOfUser
                Set(userAssignments_json_v2, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetRoleAssignmentOfUserV2", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userAssignments_Table_v2, 
                        ForAll(Table(userAssignments_json_v2),
                            {
                                //roleAssignmentId: Text(ThisRecord.Value.id),
                                //principalId: Text(ThisRecord.Value.principalId),
                                roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                                roleDisplayName: Text(ThisRecord.Value.roleName),
                                timeAssignment: With({ expirations: Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & Text(ThisRecord.Value.roleDefinitionId) & """ }").result).value) },
                                    If(CountRows(expirations) > 0 And First(expirations).Value.scheduleInfo.expiration.type <> "noExpiration", Text(DateAdd(DateTimeValue(First(expirations).Value.completedDateTime), Value(Substitute(Substitute(First(expirations).Value.scheduleInfo.expiration.duration, "PT",""), "H", "")), TimeUnit.Hours)), "No Expiry")
                                )
                            }
                        )
                    );
        
                Set(isGlobalAdmin, If(CountRows(Filter(userAssignments_Table_v2, roleDisplayName = "Global Administrator")) <> 0, true, false));
        
                If(isGlobalAdmin, 
                    Set(globalAdminExpiryRecord, First(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & "62e90394-69f5-4237-9190-012177145e10" & """ }").result).value)).Value  );
                    If(globalAdminExpiryRecord.scheduleInfo.expiration.type = "noExpiration",
                        Set(globalAdminExpiryMessage, $"Your global admin has no expiration");
                        ,
                        Set(globalAdminStartedOnDateTime, DateTimeValue( globalAdminExpiryRecord.completedDateTime));
                        Set(globalAdminDurationNumber, Value(Substitute(Substitute(globalAdminExpiryRecord.scheduleInfo.expiration.duration, "PT",""), "H", "")));
                        Set(globalAdminEndsOn, DateAdd(globalAdminStartedOnDateTime, globalAdminDurationNumber, TimeUnit.Hours));
                        Set(globalAdminExpiryMessage, $"Your global admin started on: {globalAdminStartedOnDateTime} and ends @ {globalAdminEndsOn}");
                    );
                    
                
                );
        );
        Set(callFunction, "");
        Set(sectionLoader, {visible: false, label: "Loading Details..."});
    Width: =640
    X: =0
    Y: =0
    ZIndex: =1

