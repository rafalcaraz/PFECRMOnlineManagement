AppLoaders As CanvasComponent:
    areaToLoad: =""
    Fill: =RGBA(0, 0, 0, 0)
    Height: =640
    OnReset: |-
        =Set(sectionLoader, {visible: true, label: "Loading " & AppLoaders.areaToLoad});
        Switch(
            AppLoaders.areaToLoad,
                "Licenses & Roles",
                    ClearCollect(productsFriendly,
                        //Set(payloadJson, {} );
                        //ForAll(Table(PFECRMOnlineHelper.PerformAction({Area:"Licenses" ,Operation:"SKUsFriendlyNames",Parameters: ParseJSON(JSON(payloadJson))}) ) As _skus,
                        ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "SKUsFriendlyNames", "{}").result)) As _skus,
                            {
                                skuId: Text(_skus.Value.skuId),
                                skuPartNumber: Text(_skus.Value.skuPartNumber),
                                FriendlyName: Text(_skus.Value.Title) 
                            }
                        );
                    );
        
                    // Retrieve all SKUS
                    Set(availableSKUs_table_2, 
                        //Set(payloadJson, {} );
                        //ForAll(Table(PFECRMOnlineHelper.PerformAction({Area:"Licenses" ,Operation:"AvailableSKUs",Parameters: ParseJSON(JSON(payloadJson))}) ) As _skus,
                        ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "AvailableSKUs", "{}").result).value) As _skus, 
                            { capabilityStatus: Text(_skus.Value.capabilityStatus),   //Text(ThisRecord.Value.capabilityStatus), 
                                consumedUnits: Value(_skus.Value.consumedUnits),
                                skuId: Text(_skus.Value.skuId), 
                                skuPartNumber: Text(_skus.Value.skuPartNumber), 
                                enabledPrepaidUnits: Value(_skus.Value.prepaidUnits.enabled),
                                appliesTo: Text(_skus.Value.appliesTo),
                                friendlyName: LookUp(productsFriendly, skuId = Text(_skus.Value.skuId)).FriendlyName
                            }
                        )
                    );
        
                    //GetUserLicenses
                    //Set(payloadJson, {userId: userMainRecord.id} );
                    //Set(userLicences_json, PFECRMOnlineHelper.PerformAction({Area:"Licenses" ,Operation:"GetUserLicenses",Parameters: ParseJSON(JSON(payloadJson))}) );
                    Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetUserLicenses", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userLicences_Table, 
                        ForAll(Table(userLicences_json.value) As _items,
                            {
                                licenseAssignmentId: Text(_items.Value.id),
                                licenseSkuId: Text(_items.Value.skuId),
                                licenseSkuPartNumber: Text(_items.Value.skuPartNumber),
                                timeAssignment: "N/A",
                                friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName
                            }
                        )
                    );
        
                    //Get User Timed Requests
                    //Set(payloadJson, {userId: userMainRecord.id} );
                    //Set(userTimedRequests_json, PFECRMOnlineHelper.PerformAction({Area:"Licenses" ,Operation:"GetAccessRequests",Parameters: ParseJSON(JSON(payloadJson))}) );
                    Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses","GetAccessRequests", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userTimedRequests_Table, 
                        ForAll(Table(userTimedRequests_json.value),
                            {
                                requestName: Text(ThisRecord.Value.msftce_name),
                                requestType: Value(ThisRecord.Value.msftce_requesttype),
                                requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),
                                requestStartDate: Text(ThisRecord.Value.msftce_startdate),
                                requestLength: Value(ThisRecord.Value.msftce_length),
                                requestEndDate: Text(ThisRecord.Value.msftce_enddate),
                                requestStateCode: Value(ThisRecord.Value.statecode)
                            }
                        )
                    );
        
                    //GetRoleAssignmentOfUser
                    //Set(payloadJson, {userId: userMainRecord.id} );
                    //Set(userAssignments_json, PFECRMOnlineHelper.PerformAction({Area:"Licenses" ,Operation:"GetRoleAssignmentOfUser",Parameters: ParseJSON(JSON(payloadJson))}) );
                    //Set(userAssignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetRoleAssignmentOfUser", "{""userId"":""" & userMainRecord.id & """ }").result));
                    //Set(userAssignments_Table, 
                    //    ForAll(Table(userAssignments_json.value),
                    //        {
                    //            roleAssignmentId: Text(ThisRecord.Value.id),
                    //            principalId: Text(ThisRecord.Value.principalId),
                    //            roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                    //            roleDisplayName: Text(ThisRecord.Value.roleDefinition.displayName),
                    //            timeAssignment: "false"
                    //        }
                    //    )
                    //);
        
                    Set(userAssignments_json_v2, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Licenses", "GetRoleAssignmentOfUserV2", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userAssignments_Table_v2, 
                        ForAll(Table(userAssignments_json_v2),
                            {
                                //roleAssignmentId: Text(ThisRecord.Value.id),
                                //principalId: Text(ThisRecord.Value.principalId),
                                roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                                roleDisplayName: Text(ThisRecord.Value.roleName),
                                timeAssignment: With({ expirations: Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & Text(ThisRecord.Value.roleDefinitionId) & """ }").result).value) },
                                    If(CountRows(expirations) > 0 And First(expirations).Value.scheduleInfo.expiration.type <> "noExpiration", Text(DateAdd(DateTimeValue(First(expirations).Value.completedDateTime), Value(Substitute(Substitute(First(expirations).Value.scheduleInfo.expiration.duration, "PT",""), "H", "")), TimeUnit.Hours)), "No Expiry")
                                )
                            }
                        )
                    );
        
                Set(isGlobalAdmin, If(CountRows(Filter(userAssignments_Table_v2, roleDisplayName = "Global Administrator")) <> 0, true, false));
        
                If(isGlobalAdmin, 
                    Set(globalAdminExpiryRecord, First(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure", "GetRoleExpiration", "{""pfeCrmOnlineUserId"":""" & userMainRecord.id & """,""roleId"":""" & "62e90394-69f5-4237-9190-012177145e10" & """ }").result).value)).Value  );
                    If(globalAdminExpiryRecord.scheduleInfo.expiration.type = "noExpiration",
                        Set(globalAdminExpiryMessage, $"Your global admin has no expiration");
                        ,
                        Set(globalAdminStartedOnDateTime, DateTimeValue( globalAdminExpiryRecord.completedDateTime));
                        Set(globalAdminDurationNumber, Value(Substitute(Substitute(globalAdminExpiryRecord.scheduleInfo.expiration.duration, "PT",""), "H", "")));
                        Set(globalAdminEndsOn, DateAdd(globalAdminStartedOnDateTime, globalAdminDurationNumber, TimeUnit.Hours));
                        Set(globalAdminExpiryMessage, $"Your global admin started on: {globalAdminStartedOnDateTime} and ends @ {globalAdminEndsOn}");
                    );
                    
                
                );
        
        
                ,
                "Admin Only",
                    Set(allUsers_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("UserMaintenance", "GetAllUsers", "{}").result));
        
                    Set(allUsers_created_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("UserMaintenance", "GetAllUsersCreatorV2", "{}").result));
        
                    Set(allUsers_created_table,
                        ForAll(Table(allUsers_created_json) As _users,
                            {
                                //activityDateTime: DateTimeValue(_users.Value.activityDateTime),//"dateTime",
                                initiatedUserId: Text(_users.Value.msftce_creatoruserid),//Text(_users.Value.initiatedBy.user.id),
                                initiatedUserPrincipalName: Text(_users.Value.msftce_creatoruseremail),//Text(_users.Value.initiatedBy.user.userPrincipalName),
                                targetUserId: Text(_users.Value.msftce_userid),//Text(First(Table(_users.Value.targetResources)).Value.id),
                                targetUserPrincipalEmail: Text(_users.Value.msftce_name)//Text(First(Table(_users.Value.targetResources)).Value.userPrincipalName)
        
                            }
                        )
                    );
        
                    Set(allUsers_table,
                        ForAll(Table(allUsers_json) As _users,
                            {
                                displayName: _users.Value.displayName,
                                userPrincipalName: _users.Value.userPrincipalName,
                                objectId: _users.Value.id,
                                accountEnabled: _users.Value.accountEnabled,
                                microsoftEmails: _users.Value.customSecurityAttributes.PFECRMOnlineExtensions.microsoftEmails,
                                parentAccountEmail: _users.Value.customSecurityAttributes.PFECRMOnlineExtensions.parentAccountEmail,
                                parentAccountId: _users.Value.customSecurityAttributes.PFECRMOnlineExtensions.parentAccountId,
                                otherMails: _users.Value.otherMails,
                                manager: _users.Value.manager.userPrincipalName,
                                area: _users.Value.customSecurityAttributes.PFECRMOnlineExtensions.area,
                                isMainAccount: Boolean(_users.Value.customSecurityAttributes.PFECRMOnlineExtensions.isMainAccount),
                                lastSignInDate: DateTimeValue(_users.Value.signInActivity.lastSignInDateTime),
                                lastNonInteractiveSignInDateTime: DateTimeValue(_users.Value.signInActivity.lastNonInteractiveSignInDateTime),
                                createdDateTime: DateTimeValue(_users.Value.createdDateTime),
                                createdBy:
                                    If(DateTimeValue(_users.Value.createdDateTime) < DateTimeValue("10/16/2023 00:00 AM"), 
                                
                                        "-----",
                                        With( {_creator : LookUp(allUsers_created_table, targetUserId = _users.Value.id)},
                                            If(IsBlank(_creator), 
                                                "will lookup",
                                                //With({_latestCreator: ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("UserMaintenance", "FindUserCreator", "{""userEmail"":""" & _users.Value.userPrincipalName & """}").result)}, 
                                                //    If(CountRows(Table(_latestCreator.Value)) > 0, "**~~not captured in logs yet", "***not captured in logs yet...")
                                                //), 
                                                _creator.initiatedUserPrincipalName
                                            )
        
                                        )
                                        
                                    ) 
                                        
                            }
                        )
                    );
        
                    ClearCollect(allUsers_table_extended, AddColumns(Sort(allUsers_table, createdDateTime,SortOrder.Descending), "userRecord",If(CountRows(Table(otherMails)) > 0 And EndsWith(First(Table(otherMails)).Value, "@microsoft.com") ,ParseJSON(ValidateADUser.Run(First(Table(otherMails)).Value).validuser), Blank())));
        
                    ClearCollect(allUsers_table_filtered, allUsers_table_extended);
                ,
                "Azure", // loads for regular users
        
        
        
                  ClearCollect(allAzureSubscriptions_pfecrmonlinemanged, 
                        [
                            {name: "pfecrmonline1", subscriptionId: "0a537d41-5022-4045-b883-9f81a4472cc6"},
                            {name: "pfecrmonline2", subscriptionId: "43dee89f-36d9-4ca9-b1f7-f12b10d8f4cb"},
                            {name: "pfecrmonline3", subscriptionId: "6ab6d918-4f69-4e2f-bbc4-477c51d4d861"},
                            {name: "pfecrmonline4", subscriptionId: "d07a4420-5dd2-4a0f-9fbc-6a540c8d39de"},
                            {name: "pfecrmonline5", subscriptionId: "125c91a9-df92-4b48-92cd-6f2a02ad2c4f"},
                            {name: "pfecrmonline6", subscriptionId: "9dbbd8ea-67a6-4fc0-bfdb-cb683af1d1df"}
                        ]
                    );
        
                    ClearCollect(allResourceGroups, Blank());
                    ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,
                        Collect(allResourceGroups,
                            ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure","GetAllResourceGroupsInSubscription", "{""subscriptionId"":""" & _subscriptions.subscriptionId & """ }").result).value) As _groups,
                                {
                                    id : Text(_groups.Value.id),
                                    name: Text(_groups.Value.name),
                                    susbcriptionId: Text(_subscriptions.subscriptionId),
                                    subscriptionName: Text(_subscriptions.name),
                                    managedBy: Text(_groups.Value.managedBy)
                                }
                            )
                        )
                    );
        
                    With( {mainGroup : LookUp(allResourceGroups, name = (Substitute(userProfile.userPrincipalName, "@microsoft.com", "") & "-resource-group")  )},
                        If(IsBlank(mainGroup),
                            // If is blank
                            Set(userAzGroupDetails, Blank());
                            ,
                            // If is not blank
                            Set(userAzGroupDetails, {agName: mainGroup.name, agUrl : "https://portal.azure.com/#@pfecrmonline.onmicrosoft.com/resource" & mainGroup.id & "/overview"})
                        )
                    );
                ,
                "Azure Resources",  //admin
                    // Retrieve all azure Subscriptions
                    //Look up admin area since its requiring users too
                    With( {curAreaSetting: LookUp(appActions_loaded, displayName = "Admin Only")}, 
                        If(curAreaSetting.loaded = false,
        
                            Set(areaToLoad, "Admin Only");
        
                            Patch(appActions_loaded, curAreaSetting, {loaded: true});
                    
                        
                        )
        
                    );
                    
                    ClearCollect(allAzureSubscriptions_pfecrmonlinemanged, 
                        [
                            {name: "pfecrmonline1", subscriptionId: "0a537d41-5022-4045-b883-9f81a4472cc6"},
                            {name: "pfecrmonline2", subscriptionId: "43dee89f-36d9-4ca9-b1f7-f12b10d8f4cb"},
                            {name: "pfecrmonline3", subscriptionId: "6ab6d918-4f69-4e2f-bbc4-477c51d4d861"},
                            {name: "pfecrmonline4", subscriptionId: "d07a4420-5dd2-4a0f-9fbc-6a540c8d39de"},
                            {name: "pfecrmonline5", subscriptionId: "125c91a9-df92-4b48-92cd-6f2a02ad2c4f"},
                            {name: "pfecrmonline6", subscriptionId: "9dbbd8ea-67a6-4fc0-bfdb-cb683af1d1df"}
                        ]
                    );
        
                    ClearCollect(userResourceGroups, Blank());
                    ForAll(allAzureSubscriptions_pfecrmonlinemanged As _subscriptions,
                        Collect(allResourceGroups,
                            ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("Azure","GetAllResourceGroupsInSubscription", "{""subscriptionId"":""" & _subscriptions.subscriptionId & """ }").result).value) As _groups,
                                {
                                    id : Text(_groups.Value.id),
                                    name: Text(_groups.Value.name),
                                    susbcriptionId: Text(_subscriptions.subscriptionId),
                                    subscriptionName: Text(_subscriptions.name),
                                    managedBy: Text(_groups.Value.managedBy)
                                }
                            )
                        )
                    );
        );
        Set(sectionLoader, {visible: false, label: "Loading " & AppLoaders.areaToLoad});
    Width: =640
    X: =0
    Y: =0
    ZIndex: =1

