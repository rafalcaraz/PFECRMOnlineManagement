LinkAccount As CanvasComponent:
    Fill: =RGBA(0, 0, 0, 0)
    Height: =App.Height
    Width: =App.Width
    X: =0
    Y: =0
    ZIndex: =1

    transparentBackground_2 As rectangle:
        Fill: =RGBA(209, 209, 209, .8)
        Height: =App.Height
        Width: =App.Width
        ZIndex: =1

    solidBackground_2 As rectangle:
        Fill: =RGBA(0, 51, 102, 1)
        Height: =675
        Width: =1191
        X: =72
        Y: =36
        ZIndex: =2

    closeLabel_2 As icon.CancelBadge:
        Color: =RGBA(255, 255, 255, 1)
        Height: =42
        Icon: =Icon.CancelBadge
        OnSelect: |
            =Set(showLinkAccountPopup, false);
            Reset(UserNameTextInput);
            Set(userFound, Blank());
            Set(isAccountLinked, false);
            Set(isUserSearched, false);
            
            
            
            
            
            //userSearched,validUser_json,payloadString,validateUserInPFE
            
            // Load licenses after newly created account
            If(!msUserExists And userAccountLinkedSuccesfully,
            
                    // Search for Current User in PFECRMOnline, searching against job title [TEMP], will check for 'other' email first
                Set(userDetailsResponse_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("FindMSUserInPFETenant", "{""msftUserEmail"":""" & User().Email & """ }").result));
                Set(msUserExists, If(CountRows(Table(userDetailsResponse_json.value)) > 0 , true, false));
            
                If(msUserExists, 
                    Set(userMainRecord, 
                        {
                            id: Text(First(Table(userDetailsResponse_json.value)).Value.id), 
                            userPrincipalName: Text(First(Table(userDetailsResponse_json.value)).Value.userPrincipalName)
                        }
                    );
            
                    //GetUserLicenses
                    Set(userLicences_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("GetUserLicenses", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userLicences_Table, 
                        ForAll(Table(userLicences_json.value) As _items,
                            {
                                licenseAssignmentId: Text(_items.Value.id),
                                licenseSkuId: Text(_items.Value.skuId),
                                licenseSkuPartNumber: Text(_items.Value.skuPartNumber),
                                timeAssignment: "N/A",
                                friendlyName: LookUp(productsFriendly, skuId = Text(_items.Value.skuId)).FriendlyName
                            }
                        )
                    );
            
                    //Get User Timed Requests
                    Set(userTimedRequests_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("GetAccessRequests", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userTimedRequests_Table, 
                        ForAll(Table(userTimedRequests_json.value),
                            {
                                requestName: Text(ThisRecord.Value.msftce_name),
                                requestType: Value(ThisRecord.Value.msftce_requesttype),
                                requestLicenseSkuId: Text(ThisRecord.Value.msftce_licenseskuid),
                                requestStartDate: Text(ThisRecord.Value.msftce_startdate),
                                requestLength: Value(ThisRecord.Value.msftce_length),
                                requestEndDate: Text(ThisRecord.Value.msftce_enddate),
                                requestStateCode: Value(ThisRecord.Value.statecode)
                            }
                        )
                    );
            
                    //GetRoleAssignmentOfUser
                    Set(userAssignments_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("GetRoleAssignmentOfUser", "{""userId"":""" & userMainRecord.id & """ }").result));
                    Set(userAssignments_Table, 
                        ForAll(Table(userAssignments_json.value),
                            {
                                roleAssignmentId: Text(ThisRecord.Value.id),
                                principalId: Text(ThisRecord.Value.principalId),
                                roleDefinitionId: Text(ThisRecord.Value.roleDefinitionId),
                                roleDisplayName: Text(ThisRecord.Value.roleDefinition.displayName),
                                timeAssignment: "false"
                            }
                        )
                    );
            
                    // Retrieve all SKUS
                    Set(availableSKUs_table_2, 
                        ForAll(Table(ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("AvailableSKUs", "{}").result).value) As _skus, 
                            { capabilityStatus: Text(_skus.Value.capabilityStatus),   //Text(ThisRecord.Value.capabilityStatus), 
                                consumedUnits: Value(_skus.Value.consumedUnits),
                                skuId: Text(_skus.Value.skuId), 
                                skuPartNumber: Text(_skus.Value.skuPartNumber), 
                                enabledPrepaidUnits: Value(_skus.Value.prepaidUnits.enabled),
                                appliesTo: Text(_skus.Value.appliesTo),
                                friendlyName: LookUp(productsFriendly, skuId = Text(_skus.Value.skuId)).FriendlyName
                            }
                        )
                    );
            
                );
            );
            
            Set(userAccountLinkedSuccesfully, false);
        Width: =50
        X: =75
        Y: =47
        ZIndex: =3

    poupLabel_2 As label:
        Color: =RGBA(255, 255, 255, 1)
        FontWeight: =FontWeight.Bold
        Height: =32
        Text: ="Link User"
        Width: =220
        X: =1043
        Y: =36
        ZIndex: =4

    currentUserEmailLabel_1 As label:
        Color: =RGBA(255, 255, 255, 1)
        Height: =32
        Text: |-
            ="PFECRMOnline Email: " & userMainRecord.userPrincipalName
        Width: =764
        X: =132
        Y: =57
        ZIndex: =5

    UserNameTextInput As text:
        Default: =""
        HintText: ="Enter Username To Find"
        Width: =242
        X: =112
        Y: =144
        ZIndex: =6

    DomainLabel As label:
        Color: =RGBA(255, 255, 255, 1)
        Text: ="@pfecrmonline.onmicrosoft.com"
        Width: =312
        X: =354
        Y: =144
        ZIndex: =7

    FindUserAccountButton As button:
        DisplayMode: =If(IsBlank(UserNameTextInput),DisplayMode.Disabled,DisplayMode.Edit)
        OnSelect: |+
            =//Set(userSearched, MicrosoftEmailInput.Text);
            //Set(validUser_json, ParseJSON(ValidateADUser.Run(userSearched).validuser));
            //If(Boolean(validUser_json.validMSUser), 
                // True condition
              //  Notify("MS user is valid", NotificationType.Success, 2000);
               // Set(payloadString, "{""userEmail"":"""  & Text(validUser_json.email) & """,""userUPN"":""" & Text(validUser_json.upn) & """}");
               // Set(validateUserInPFE, ParseJSON(GraphCustomConnectorAPIWrapper.Run("ValidateUser", payloadString).result));
                //, 
                
                // False condition
                //Notify("MS user provided is not valid", NotificationType.Error, 2000));
            
            
            Set(payloadString, "{" &
            """pfeCrmOnlineEmail"":""" & Substitute(UserNameTextInput.Text, " ", "") & "@pfecrmonline.onmicrosoft.com" & """" &
            "}");
            Set(userSearch_json, ParseJSON('Temp-TestingNewFlowForIncomingRequests'.Run("GetUserDetails", payloadString).result));
            Set(userFound, !IsBlank(Text(userSearch_json.id)));
            If(userFound, Notify("User was found ✅", NotificationType.Success), Notify("User was not found ❌", NotificationType.Error));
            Set(isAccountLinked, CountRows(Table(userSearch_json.otherMails)) > 0);
            Set(isUserSearched, true);
            
            
            //Set(userCreated_json, ParseJSON(GraphCustomConnectorAPIWrapper.Run("CreateUser", payloadString).result));
            
            
        Text: ="Find"
        X: =112
        Y: =200
        ZIndex: =8

    LinkAccountLabel As label:
        Color: =RGBA(255, 255, 255, 1)
        Text: =If(userFound, If(isAccountLinked = false, "Account is ready to be linked", "Account is valid but already associated to another user"), "User was not found, enter a valid account to link")
        Visible: =isUserSearched
        Width: =362
        X: =112
        Y: =279
        ZIndex: =12

    LinkAccount2Button As button:
        DisplayMode: =If(userFound And !isAccountLinked, DisplayMode.Edit, DisplayMode.Disabled)
        OnSelect: |-
            =Set(curUserAdDetails, ParseJSON(ValidateADUser.Run(User().Email).validuser));
            Set(emailsArray, "[""" & If(Text(curUserAdDetails.upn) = Text(curUserAdDetails.email), Text(curUserAdDetails.upn) & """", Text(curUserAdDetails.upn) & """,""" & Text(curUserAdDetails.email) & """") & "]");
            
            Set(payloadString, 
                    "{""pfeCrmOnlineUserId"":""" & Text(userSearch_json.id) & ""","
                    & """emailsToLink"":" & emailsArray & "}"
                );
            
            'Temp-TestingNewFlowForIncomingRequests'.Run("LinkUser", payloadString);
            Set(userAccountLinkedSuccesfully, true);
            Notify("User account linked succesfully", NotificationType.Success);
        Text: ="Link Account"
        X: =112
        Y: =334
        ZIndex: =13

